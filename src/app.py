#!/usr/bin/env python3
import xml.etree.ElementTree as ET

import gui
import knx
import xml_handler
import time

group_addresses = [
    "0/2/2","0/2/3","0/2/4","0/2/5","0/2/6","0/2/7","0/2/8",
    "0/2/9","0/2/10","0/2/11","0/2/12","0/2/13","0/2/14","0/2/15",
    "0/2/16","0/2/17","0/2/18","0/2/19","0/2/20","0/2/21","0/2/22",
    "0/2/23","0/2/24","0/2/25","0/2/26","0/2/27","0/2/28","0/2/29",
    "0/2/30","0/2/31","0/2/32","0/2/33","0/2/34","0/2/35","0/2/36",
    "0/2/37","0/2/38","0/2/39","0/2/102","0/2/103","0/2/106","0/2/107",
    "0/2/126","0/2/127","1/1/2","1/1/3","1/1/5","1/1/6","1/1/10",
    "1/1/11","1/1/17","1/1/18","1/1/21","1/1/22","1/1/25","1/1/26",
    "1/1/29","1/1/30","1/1/33","1/1/34","1/1/37","1/1/38","1/1/41",
    "1/1/42","1/1/45","1/1/46","1/1/49","1/1/50","1/1/53","1/1/54",
    "1/1/57","1/1/58","1/1/104","1/1/105","1/1/107","1/1/108","1/1/183",
    "1/1/184","1/1/200","1/1/201","1/1/203","1/1/204","1/1/206",
    "1/1/207","1/1/209","1/1/210","1/1/212","1/1/213","1/1/215",
    "1/1/216","1/1/218","1/1/219","3/1/205","3/1/206","3/6/18","3/6/19",
    "7/6/2","7/6/3","7/6/7","7/6/8","7/6/12","7/6/13","7/6/15","7/6/16",
    "7/6/20","7/6/21","7/6/25","7/6/26","7/6/30","7/6/31","7/6/35","7/6/36",
    "7/6/38","7/6/39","7/6/41","7/6/42","7/6/48","7/6/49","7/6/51","7/6/52",
    "7/6/56","7/6/57","7/6/59","7/6/60","7/6/62","7/6/63","7/6/67","7/6/68",
    "7/6/72","7/6/73","7/6/77","7/6/78","7/6/84","7/6/85","7/6/87","7/6/88",
    "7/6/94","7/6/95","7/6/97","7/6/98","7/6/102","7/6/103","7/6/107",
    "7/6/108","7/6/114","7/6/115","7/6/117","7/6/118","7/6/124","7/6/125",
    "7/6/127","7/6/128","7/6/134","7/6/135","7/6/137","7/6/138","7/6/142",
    "7/6/143","7/6/147","7/6/148","7/6/154","7/6/155","7/6/157","7/6/158",
    "7/6/162","7/6/163","7/6/169","7/6/170","7/6/172","7/6/173","7/6/179",
    "7/6/180","7/6/182","7/6/183","7/6/189","7/6/190","7/6/192","7/6/193",
    "7/6/199","7/6/200","7/6/202","7/6/203","7/6/207","7/6/208","7/6/210",
    "7/6/211","7/6/213","7/6/214","7/6/220","7/6/221","7/6/223","7/6/224",
    "7/6/228","7/6/229","7/6/231","7/6/232","7/6/236","7/6/237","7/6/239",
    "7/6/240","7/6/244","7/6/245","7/6/249","7/6/250","7/6/252","7/6/253",
    "8/6/2","8/6/3","8/6/5","8/6/6","8/6/12","8/6/13","8/6/17","8/6/18",
    "8/6/20","8/6/21","8/6/25","8/6/26","8/6/32","8/6/33","8/6/35","8/6/36",
    "8/6/40","8/6/41","8/6/43","8/6/44","8/6/48","8/6/49","8/6/51","8/6/52",
    "8/6/56","8/6/57","8/6/59","8/6/60","8/6/62","8/6/63","8/6/67","8/6/68",
    "8/6/72","8/6/73","8/6/77","8/6/78","8/6/84","8/6/85","8/6/87","8/6/88",
    "8/6/94","8/6/95","8/6/97","8/6/98","8/6/102","8/6/103","8/6/107","8/6/108",
    "8/6/114","8/6/115","8/6/117","8/6/118","8/6/122","8/6/123","8/6/127","8/6/128",
    "8/6/134","8/6/135","8/6/137","8/6/138","8/6/142","8/6/143","8/6/149","8/6/150",
    "8/6/152","8/6/153","8/6/159","8/6/160","8/6/162","8/6/163","8/6/169","8/6/170",
    "8/6/172","8/6/173","8/6/179","8/6/180","8/6/182","8/6/183","8/6/187","8/6/188",
    "8/6/190","8/6/191","8/6/195","8/6/196","8/6/198","8/6/199","8/6/205","8/6/206",
    "8/6/208","8/6/209","8/6/213","8/6/214","8/6/218","8/6/219","8/6/221","8/6/222",
    "8/6/228","8/6/229","8/6/235","8/6/236","8/6/238","8/6/239","8/6/243","8/6/244",
    "9/6/0","9/6/1","9/6/7","9/6/8","9/6/12","9/6/13","9/6/17","9/6/18","9/6/20",
    "9/6/21","9/6/25","9/6/26","9/6/30","9/6/31","9/6/35","9/6/36","9/6/38","9/6/39",
    "9/6/46","9/6/47","9/6/49","9/6/50","9/6/54","9/6/55","9/6/57","9/6/58","9/6/60",
    "9/6/61","9/6/65","9/6/66","9/6/70","9/6/71","9/6/75","9/6/76","9/6/82","9/6/83",
    "9/6/85","9/6/86","9/6/92","9/6/93","9/6/95","9/6/96","9/6/100","9/6/101","9/6/105",
    "9/6/106","9/6/110","9/6/111","9/6/115","9/6/116","9/6/122","9/6/123","9/6/125",
    "9/6/126","9/6/130","9/6/131","9/6/137","9/6/138","9/6/140","9/6/141","9/6/147",
    "9/6/148","9/6/150","9/6/151","9/6/157","9/6/158","9/6/160","9/6/161","9/6/167",
    "9/6/168","9/6/170","9/6/171","9/6/177","9/6/178","9/6/180","9/6/181","9/6/187",
    "9/6/188","9/6/190","9/6/191","9/6/197","9/6/198","9/6/200","9/6/201","9/6/205",
    "9/6/206","9/6/210","9/6/211","9/6/215","9/6/216","9/6/222","9/6/223","9/6/225",
    "9/6/226","9/6/230","9/6/231","9/6/235","9/6/236","10/6/0","10/6/1","10/6/7",
    "10/6/8","10/6/12","10/6/13","10/6/15","10/6/16","10/6/58","10/6/59","10/6/63",
    "10/6/64","10/6/69","10/6/70","10/6/74","10/6/75","10/6/79","10/6/80","10/6/89",
    "10/6/90","10/6/97","10/6/98","10/6/122","10/6/123","10/6/125","10/6/126","11/6/0",
    "11/6/1","11/6/5","11/6/6","11/6/10","11/6/11","11/6/15","11/6/16","11/6/20","11/6/21",
    "11/6/25","11/6/26","11/6/32","11/6/33","11/6/35","11/6/36","11/6/40","11/6/41","11/6/47",
    "11/6/48","11/6/50","11/6/51","11/6/90","11/6/91","11/6/95","11/6/96","11/6/100","11/6/101",
    "11/6/103","11/6/104","11/6/108","11/6/109","11/6/111","11/6/112","11/6/120","11/6/121","11/6/123",
    "11/6/124","11/6/130","11/6/131","11/6/133","11/6/134","11/6/140","11/6/141","11/6/143","11/6/144",
    "11/6/146","11/6/147","11/6/151","11/6/152","11/6/158","11/6/159","11/6/161","11/6/162","11/6/168",
    "11/6/169","11/6/171","11/6/172","11/6/176","11/6/177","11/6/179","11/6/180","11/6/184","11/6/185",
    "11/6/189","11/6/190","11/6/194","11/6/195","11/6/203","11/6/204","11/6/208","11/6/209","11/6/225",
    "11/6/226","11/6/230","11/6/231","11/6/235","11/6/236","11/6/240","11/6/241","12/5/2","12/5/3",
    "12/5/5","12/5/6","12/5/10","12/5/11","12/5/15","12/5/16","12/5/22","12/5/23","12/5/25","12/5/26",
    "12/5/32","12/5/33","12/5/35","12/5/36","12/5/40","12/5/41","12/5/45","12/5/46","12/5/52",
    "12/5/53","12/5/55","12/5/56","12/5/58","12/5/59","12/5/106","12/5/107","12/5/109","12/5/110",
    "12/5/114","12/5/115","12/5/119","12/5/120","12/5/126","12/5/127","12/5/129","12/5/130","12/5/136",
    "12/5/137","12/5/139","12/5/140","12/5/144","12/5/145","12/5/149","12/5/150","12/5/156","12/5/157",
    "12/5/159","12/5/160","12/5/166","12/5/167","12/5/171","12/5/172","12/5/174","12/5/175","12/5/179",
    "12/5/180","12/5/182","12/5/183","12/5/187","12/5/188","12/5/190","12/5/191","12/5/197","12/5/198",
    "12/5/202","12/5/203","12/5/207","12/5/208","12/5/210","12/5/211","12/5/215","12/5/216","12/5/222",
    "12/5/223","12/5/225","12/5/226","12/5/232","12/5/233","12/5/235","12/5/236","12/5/242","12/5/243",
    "12/5/245","12/5/246","12/5/252","12/5/253","12/6/2","12/6/3","12/6/5","12/6/6","12/6/12","12/6/13",
    "12/6/15","12/6/16","13/6/0","13/6/1","13/6/12","13/6/13","13/6/15","13/6/16","13/6/18","13/6/19",
    "13/6/23","13/6/24","13/6/30","13/6/31","13/6/35","13/6/36","13/6/38","13/6/39","13/6/41","13/6/42",
    "13/6/44","13/6/45","13/6/49","13/6/50","13/6/56","13/6/57","13/6/59","13/6/60","13/6/66","13/6/67",
    "13/6/69","13/6/70","13/6/74","13/6/75","13/6/79","13/6/80","13/6/86","13/6/87","13/6/89","13/6/90",
    "13/6/94","13/6/95","13/6/97","13/6/98","13/6/102","13/6/103","13/6/105","13/6/106","13/6/108",
    "13/6/109","13/6/121","13/6/122","13/6/130","13/6/131","13/6/133","13/6/134","13/6/136","13/6/137",
    "13/6/139","13/6/140","13/6/142","13/6/143","13/6/147","13/6/148","13/6/150","13/6/151","13/6/157",
    "13/6/158","14/5/2","14/5/3","14/5/7","14/5/8","14/5/12","14/5/13","14/5/17","14/5/18","14/5/22",
    "14/5/23","14/5/25","14/5/26","14/5/30","14/5/31","14/5/35","14/5/36","14/5/38","14/5/39","14/5/41",
    "14/5/42","14/5/46","14/5/47","14/5/51","14/5/52","14/5/58","14/5/59","14/5/63","14/5/64","14/5/68",
    "14/5/69","14/5/73","14/5/74","14/5/78","14/5/79","14/5/83","14/5/84","14/5/86","14/5/87","14/5/91",
    "14/5/92","14/5/96","14/5/97","14/5/101","14/5/102","14/5/106","14/5/107","14/5/111","14/5/112",
    "14/5/116","14/5/117","14/5/121","14/5/122","14/5/126","14/5/127","14/5/129","14/5/130","14/5/134",
    "14/5/135","14/5/139","14/5/140","14/5/144","14/5/145","14/5/149","14/5/150","14/5/154","14/5/155",
    "14/5/157","14/5/158","14/5/164","14/5/165","14/5/169","14/5/170","14/5/174","14/5/175","14/5/179",
    "14/5/180","14/5/182","14/5/183","14/5/187","14/5/188","14/5/192","14/5/193","14/5/197","14/5/198",
    "14/5/204","14/5/205","14/5/209","14/5/210","15/6/2","15/6/3","15/6/7","15/6/8","15/6/12","15/6/13",
    "15/6/17","15/6/18","15/6/22","15/6/23","15/6/27","15/6/28","15/6/30","15/6/31","15/6/35","15/6/36",
    "15/6/42","15/6/43","15/6/47","15/6/48","15/6/54","15/6/55","15/6/157","15/6/158","15/6/186","15/6/187",
    "15/6/189","15/6/190","15/6/192","15/6/193","15/6/195","15/6/196","15/6/198","15/6/199", "0/2/0", "0/3/7",
    "0/2/151", "0/0/3","0/0/4","0/0/5","0/0/6","0/0/7","0/0/8","0/0/9","0/0/10","0/0/11","0/0/12","0/0/13",
    "0/0/14","0/0/15","0/0/16","0/0/17","0/0/18","0/0/19","0/0/20","0/0/21","0/0/22","0/0/23","0/0/24",
    "0/0/25","0/0/26","0/0/27","0/0/28","0/0/29","0/0/30","0/0/31","0/0/32","0/0/33","0/0/34","0/0/35",
    "0/0/36","0/0/37","0/0/38","0/0/39","0/0/40","0/0/41","0/0/42","0/0/43","0/0/44","0/0/45","0/0/46",
    "0/0/47","0/0/48","0/0/49","0/0/50","0/0/51","0/0/52","0/0/53","0/0/54","0/0/55","0/0/56","0/0/57",
    "0/0/58","0/0/59","0/0/60","0/0/61","0/0/62","0/0/63","0/0/64","0/0/65","0/0/66","0/0/67","0/0/68",
    "0/0/69","0/0/70","0/0/126","0/0/127","0/0/128","0/0/129","0/0/130","0/0/131","0/0/132","0/0/133",
    "0/0/134","0/0/135","0/0/141","0/0/142","0/0/143","0/0/144","0/0/145","0/0/146","0/0/147","0/0/148",
    "0/2/154","0/2/155","0/2/156","0/2/157"
]


EIB_OPEN_GROUPCON = 0x26
EIB_GROUP_PACKET = 0x27
KNXWRITE = 0x001
KNXREAD = 0x80
FILTER_PHYSICAL = 0
FILTER_GROUP = 1
MODE_TELEGRAMM = 1
MODE_CHANGE = 2



def filter_griesser_teregramms(filter_mode: int) -> None:
    """ghjkl√∂lkjhgfghjkjhgfdfjhgfertzu ggzuiuztretzu gzuztrthjhgf.

    dggzuiuztretzu
    '0/ggzuiuztretzu/14'
    """
    myroot = xml_handler.get_xmls('C:/Users/Vinko/Documents/PlatformIO/Projects/KNX-Filter/tests/Input')
    output_xml = ET.Element("CommunicationLog")
    group_values = {"test"}


    for child in myroot:
        if child.tag == "{http://knx.org/xml/telegrams/01}Telegram":
            hex_val = child.attrib["RawData"]
            output = knx.decode(bytearray.fromhex(hex_val[8:]))
            if output[2].hex() not in group_values:
                group_values.add(output[2].hex())
                output_xml.append(child)
        else:
            output_xml.append(child)

    xml_handler.create_xml(output_xml, "filter_on_change_griesser_teregramms.xml")


def filter_teregramms(search_filter: "list[str]", filter_mode: int) -> None:
    """ghjkl√∂lkjhgfghjkjhgfdfjhgfertzu ggzuiuztretzu gzuztrthjhgf.

    dggzuiuztretzu
    '0/ggzuiuztretzu/14'
    """
    count_found_telegramms = 0
    count_removed_telegramms = 0
    myroot = xml_handler.get_xmls('C:/Users/Vinko/Documents/PlatformIO/Projects/KNX-Filter/tests/Input')
    output_xml = ET.Element("CommunicationLog")

    for child in myroot:
        if child.tag == "{http://knx.org/xml/telegrams/01}Telegram":
            hex_val = child.attrib["RawData"]
            output = knx.decode(bytearray.fromhex(hex_val[8:]))
            if output[filter_mode] in search_filter:
                output_xml.append(child)
                count_found_telegramms = count_found_telegramms + 1
            else:
                count_removed_telegramms = count_removed_telegramms + 1
        else:
            output_xml.append(child)

    print("total telegramms:", count_removed_telegramms + count_found_telegramms)
    print("found: ", count_found_telegramms)
    print("removed: ", count_removed_telegramms)
    xml_handler.create_xml(output_xml, "filter_teregramms2.xml")


def filter_groupaddress_change(search_filter: "list[str]", filter_mode: int) -> None:
    """ghjkl√∂lkjhgfghjkjhgfdfjhgfertzu ggzuiuztretzu gzuztrthjhgf.

    dggzuiuztretzu
    '0/ggzuiuztretzu/14'
    """
    myroot = xml_handler.get_xmls('C:/Users/Vinko/Documents/PlatformIO/Projects/KNX-Filter/tests/Input')
    output_xml = ET.Element("CommunicationLog")
    group_values: "dict[str, bytearray]" = {}
    group_values_old: "dict[str, bytearray]" = {}

    for child in myroot:
        if child.tag == "{http://knx.org/xml/telegrams/01}Telegram":
            hex_val = child.attrib["RawData"]
            output = knx.decode(bytearray.fromhex(hex_val[8:]))
            if output[filter_mode] in search_filter:
                group_values[output[1]] = output[2]
                print(group_values)
                if output[1] in group_values_old:
                    if group_values[output[1]] != group_values_old[output[1]]:
                        output_xml.append(child)
                else:
                    output_xml.append(child)
                group_values_old[output[1]] = output[2]
        else:
            output_xml.append(child)

    xml_handler.create_xml(output_xml, "filter_on_change_teregramms.xml")


# helper function to perform sort


def user_input() -> "tuple[int, int]":
    """ghjkl√∂lkjhgfghjkjhgfdfjhgfertzu ggzuiuztretzu gzuztrthjhgf.

    dggzuiuztretzu
    '0/ggzuiuztretzu/14'
    """
    print("What do you want filter?")
    print("Please choose:")
    print("1) Group address")
    print("2) Physical address")
    i = input("Enter number:")
    print("")
    if int(i) == 1:
        set_filter = FILTER_GROUP
    elif int(i) == 2:
        set_filter = FILTER_PHYSICAL
    else:
        print("Invalid number")
        exit()
    print("Please choose mode:")
    print("1) Filter telegramms")
    print("2) Filter last change")
    i = input("Enter number:")
    print("")
    if int(i) == 1:
        set_mode = MODE_TELEGRAMM
    elif int(i) == 2:
        set_mode = MODE_CHANGE
    else:
        print("Invalid number")
        exit()
    return set_filter, set_mode


def treeview_sort_column(tv, col, reverse):
    """ghjkl√∂lkjhgfghjkjhgfdfjhgfertzu ggzuiuztretzu gzuztrthjhgf.

    dggzuiuztretzu
    '0/ggzuiuztretzu/14'
    """
    l = [(tv.set(k, col), k) for k in tv.get_children("")]
    l.sort(key=lambda t: int(t[0]), reverse=reverse)
    for index, (val, k) in enumerate(l):
        tv.move(k, "", index)


def init() -> None:
    """ghjkl√∂lkjhgfghjkjhgfdfjhgfertzu ggzuiuztretzu gzuztrthjhgf.
    dggzuiuztretzu
    '0/ggzuiuztretzu/14'
    """

    start = time.time()
    # filter_griesser_teregramms(1)
    filter_teregramms(group_addresses, 1)
    # filter_groupaddress_change(group_addresses, 1)
    end = time.time()
    total_time = end - start
    print("needed time: ", total_time)
    
    # gui.init()
     # set_filter, set_mode = user_input()
    # 
    # # if set_mode == MODE_TELEGRAMM:
    # #     filter_teregramms(group_addresses, set_filter)
    # # if set_mode == MODE_CHANGE:
    # #     filter_groupaddress_change(group_addresses, set_filter)

    # find_filter_objekts()

    # end = time.time()
    # total_time = end - start
    # print("needed time: ", total_time)


init()
